{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\LMNT\\\\frontend\\\\src\\\\components\\\\PageContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/PageContent.css';\nimport CommandHandler from '../handlers/CommandHandler';\nimport { PagesContext } from '../contexts/PagesContext'; // Update this path to your actual context file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageContent = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    pages,\n    dispatch\n  } = useContext(PagesContext);\n  const [input, setInput] = useState('');\n  const [error, setError] = useState(null);\n  const handleInputChange = async e => {\n    const newValue = e.target.value;\n    setInput(newValue);\n    try {\n      const response = await fetch('/pages/' + id, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: newValue\n        })\n      });\n      if (!response.ok) {\n        const json = await response.json();\n        console.log('Found error in updating page content');\n        setError(json.error);\n      } else {\n        console.log(\"Updated content theoretically\");\n        const updatedPage = await response.json();\n        dispatch({\n          type: 'UPDATE_PAGE',\n          payload: updatedPage\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    console.log(\"Loading page\");\n    const fetchContent = async () => {\n      try {\n        const response = await fetch('/pages/' + id); // Use template literals\n        const data = await response.json();\n        setInput(data.content);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchContent();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"page-content\",\n      className: \"page-content-container\",\n      onChange: handleInputChange,\n      value: input,\n      placeholder: \"Type a message or command\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommandHandler, {\n      input: input,\n      setInput: setInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true);\n};\n_s(PageContent, \"Os8z58tt/eECYNdZ5SlkjmLqFhk=\", false, function () {\n  return [useParams];\n});\n_c = PageContent;\nexport default PageContent;\nvar _c;\n$RefreshReg$(_c, \"PageContent\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useParams","CommandHandler","PagesContext","jsxDEV","_jsxDEV","Fragment","_Fragment","PageContent","_s","id","pages","dispatch","input","setInput","error","setError","handleInputChange","e","newValue","target","value","response","fetch","method","headers","body","JSON","stringify","content","ok","json","console","log","updatedPage","type","payload","err","fetchContent","data","children","name","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/components/PageContent.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/PageContent.css';\r\nimport CommandHandler from '../handlers/CommandHandler';\r\nimport { PagesContext } from '../contexts/PagesContext'; // Update this path to your actual context file\r\n\r\nconst PageContent = () => {\r\n  const { id } = useParams();\r\n  const { pages, dispatch } = useContext(PagesContext);\r\n  const [input, setInput] = useState('');\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleInputChange = async (e) => {\r\n    const newValue = e.target.value;\r\n    setInput(newValue);\r\n\r\n    try {\r\n      const response = await fetch('/pages/' + id, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ content: newValue })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const json = await response.json();\r\n        console.log('Found error in updating page content');\r\n        setError(json.error);\r\n      } else {\r\n        console.log(\"Updated content theoretically\");\r\n        const updatedPage = await response.json();\r\n        dispatch({ type: 'UPDATE_PAGE', payload: updatedPage })\r\n      }\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"Loading page\");\r\n    const fetchContent = async () => {\r\n      try {\r\n        const response = await fetch('/pages/' + id); // Use template literals\r\n        const data = await response.json();\r\n        setInput(data.content);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n\r\n    fetchContent();\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        name=\"page-content\"\r\n        className=\"page-content-container\"\r\n        onChange={handleInputChange}\r\n        value={input}\r\n        placeholder=\"Type a message or command\"\r\n      />\r\n      <CommandHandler input={input} setInput={setInput} />\r\n      {error && <p className=\"error-message\">{error}</p>} {/* Display error message */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}