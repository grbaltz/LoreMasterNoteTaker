{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\LMNT\\\\frontend\\\\src\\\\components\\\\PageContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/PageContent.css';\nimport CommandHandler from './CommandHandler';\nimport { PagesContext } from './PathToYourContextFile'; // Update this path to your actual context file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageContent = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    pages,\n    dispatch\n  } = useContext(PagesContext);\n  const [input, setInput] = useState('');\n\n  // Fetch content from the context on mount\n  useEffect(() => {\n    const currentPage = pages.find(page => page._id === id);\n    if (currentPage) {\n      setInput(currentPage.content || '');\n    }\n  }, [id, pages]);\n  const debounce = (func, wait) => {\n    let timeout;\n    return (...args) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), wait);\n    };\n  };\n\n  // Update content after debounce\n  const updateContent = useCallback(debounce(async newContent => {\n    const currentPage = pages.find(page => page._id === id);\n    if (currentPage) {\n      dispatch({\n        type: 'UPDATE_PAGE',\n        payload: {\n          ...currentPage,\n          content: newContent\n        }\n      });\n      try {\n        await fetch(`/pages/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            content: newContent\n          })\n        });\n      } catch (err) {\n        console.error('Failed to update page content:', err);\n      }\n    }\n  }, 500), [id, pages, dispatch]);\n  const handleInputChange = e => {\n    const newValue = e.target.value;\n    setInput(newValue);\n    updateContent(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"page-content\",\n      className: \"page-content-container\",\n      onChange: handleInputChange,\n      value: input,\n      placeholder: \"Type a message or command\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommandHandler, {\n      input: input,\n      setInput: setInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(PageContent, \"xjh+H9QDft/L/mPflgOr9HYR+H4=\", false, function () {\n  return [useParams];\n});\n_c = PageContent;\nexport default PageContent;\nvar _c;\n$RefreshReg$(_c, \"PageContent\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useCallback","useParams","CommandHandler","PagesContext","jsxDEV","_jsxDEV","Fragment","_Fragment","PageContent","_s","id","pages","dispatch","input","setInput","currentPage","find","page","_id","content","debounce","func","wait","timeout","args","clearTimeout","setTimeout","updateContent","newContent","type","payload","fetch","method","headers","body","JSON","stringify","err","console","error","handleInputChange","e","newValue","target","value","children","name","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/components/PageContent.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/PageContent.css';\r\nimport CommandHandler from './CommandHandler';\r\nimport { PagesContext } from './PathToYourContextFile'; // Update this path to your actual context file\r\n\r\nconst PageContent = () => {\r\n  const { id } = useParams();\r\n  const { pages, dispatch } = useContext(PagesContext);\r\n  const [input, setInput] = useState('');\r\n\r\n  // Fetch content from the context on mount\r\n  useEffect(() => {\r\n    const currentPage = pages.find(page => page._id === id);\r\n    if (currentPage) {\r\n      setInput(currentPage.content || '');\r\n    }\r\n  }, [id, pages]);\r\n\r\n  const debounce = (func, wait) => {\r\n    let timeout;\r\n    return (...args) => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => func(...args), wait);\r\n    };\r\n  };\r\n\r\n  // Update content after debounce\r\n  const updateContent = useCallback(\r\n    debounce(async (newContent) => {\r\n      const currentPage = pages.find(page => page._id === id);\r\n      if (currentPage) {\r\n        dispatch({\r\n          type: 'UPDATE_PAGE',\r\n          payload: { ...currentPage, content: newContent }\r\n        });\r\n\r\n        try {\r\n          await fetch(`/pages/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ content: newContent })\r\n          });\r\n        } catch (err) {\r\n          console.error('Failed to update page content:', err);\r\n        }\r\n      }\r\n    }, 500),\r\n    [id, pages, dispatch]\r\n  );\r\n\r\n  const handleInputChange = (e) => {\r\n    const newValue = e.target.value;\r\n    setInput(newValue);\r\n    updateContent(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        name=\"page-content\"\r\n        className=\"page-content-container\"\r\n        onChange={handleInputChange}\r\n        value={input}\r\n        placeholder=\"Type a message or command\"\r\n      />\r\n      <CommandHandler input={input} setInput={setInput} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}