{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\LMNT\\\\frontend\\\\src\\\\components\\\\PageContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/PageContent.css';\nimport CommandHandler from '../handlers/CommandHandler';\nimport { PagesContext } from '../contexts/PagesContext'; // Update this path to your actual context file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageContent = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    pages,\n    dispatch\n  } = useContext(PagesContext);\n  const [input, setInput] = useState('');\n\n  // Fetch content from the context on mount\n  useEffect(() => {\n    const currentPage = pages.find(page => page._id === id);\n    if (currentPage) {\n      console.log(currentPage.content);\n      setInput(currentPage.content || '');\n    }\n  }, [id, pages]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n\n  // Save content to the context and backend when it changes\n  useEffect(() => {\n    if (input) {\n      const currentPage = pages.find(page => page._id === id);\n      if (currentPage) {\n        dispatch({\n          type: 'UPDATE_PAGE',\n          payload: {\n            ...currentPage,\n            content: input\n          }\n        });\n        const updatePageContent = async () => {\n          try {\n            await fetch(`/pages/${id}`, {\n              method: 'PATCH',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                content: input\n              })\n            });\n          } catch (err) {\n            console.error('Failed to update page content:', err);\n          }\n        };\n        updatePageContent();\n      }\n    }\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"page-content\",\n      className: \"page-content-container\",\n      onChange: handleInputChange,\n      value: input,\n      placeholder: \"Type a message or command\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommandHandler, {\n      input: input,\n      setInput: setInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(PageContent, \"fzRlVMJaoYIGUveLkPiWOZ22Qpw=\", false, function () {\n  return [useParams];\n});\n_c = PageContent;\nexport default PageContent;\nvar _c;\n$RefreshReg$(_c, \"PageContent\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useParams","CommandHandler","PagesContext","jsxDEV","_jsxDEV","Fragment","_Fragment","PageContent","_s","id","pages","dispatch","input","setInput","currentPage","find","page","_id","console","log","content","handleInputChange","e","target","value","type","payload","updatePageContent","fetch","method","headers","body","JSON","stringify","err","error","children","name","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/components/PageContent.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/PageContent.css';\r\nimport CommandHandler from '../handlers/CommandHandler';\r\nimport { PagesContext } from '../contexts/PagesContext'; // Update this path to your actual context file\r\n\r\nconst PageContent = () => {\r\n  const { id } = useParams();\r\n  const { pages, dispatch } = useContext(PagesContext);\r\n  const [input, setInput] = useState('');\r\n\r\n  // Fetch content from the context on mount\r\n  useEffect(() => {\r\n    const currentPage = pages.find(page => page._id === id);\r\n    if (currentPage) {\r\n      console.log(currentPage.content);\r\n      setInput(currentPage.content || '');\r\n    }\r\n  }, [id, pages]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  // Save content to the context and backend when it changes\r\n  useEffect(() => {\r\n    if (input) {\r\n      const currentPage = pages.find(page => page._id === id);\r\n      if (currentPage) {\r\n        dispatch({\r\n          type: 'UPDATE_PAGE',\r\n          payload: { ...currentPage, content: input }\r\n        });\r\n\r\n        const updatePageContent = async () => {\r\n          try {\r\n            await fetch(`/pages/${id}`, {\r\n              method: 'PATCH',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({ content: input })\r\n            });\r\n          } catch (err) {\r\n            console.error('Failed to update page content:', err);\r\n          }\r\n        };\r\n\r\n        updatePageContent();\r\n      }\r\n    }\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        name=\"page-content\"\r\n        className=\"page-content-container\"\r\n        onChange={handleInputChange}\r\n        value={input}\r\n        placeholder=\"Type a message or command\"\r\n      />\r\n      <CommandHandler input={input} setInput={setInput} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}