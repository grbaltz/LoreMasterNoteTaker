{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nconst CommandHandler = ({\n  input,\n  setInput,\n  editor\n}) => {\n  _s();\n  const [isBold, setIsBold] = useState(false);\n  useEffect(() => {\n    const checkForCommands = value => {\n      const regex = /\\/(\\w+)/g;\n      let match;\n      while ((match = regex.exec(value)) !== null) {\n        handleCommand(match[1], match.index);\n      }\n    };\n    const handleCommand = (command, index) => {\n      switch (command) {\n        case \"d20\":\n          console.log(\"Rolled a d20: \", Math.floor(Math.random() * 20) + 1);\n          let insert = String(Math.floor(Math.random() * 20) + 1);\n          replace(command, index, insert);\n          break;\n        // Add more commands as needed\n        case \"bold\":\n          console.log('triggering bold');\n          editor.format('bold', true);\n          clear(command, index);\n          break;\n        default:\n          console.log(`Command ${command} doesn't exist/isn't finished`);\n      }\n    };\n    checkForCommands(input);\n  }, [input, setInput]);\n  const clear = (command, index) => {\n    const before = input.slice(0, index);\n    const after = input.slice(index + command.length + 1);\n    setInput(`${before}${after}`);\n  };\n  const replace = (command, index, insert) => {\n    const before = input.slice(0, index);\n    const after = input.slice(index + command.length + 1);\n    setInput(`${before}${insert}${after}`);\n  };\n\n  // Runs through body of text and converts all instances of text in between ** ** to bold characters\n  const toggleBold = () => {\n    // get the selection window\n    const selection = window.getSelection();\n    if (selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const text = range.toString();\n      if (text) {\n        const beg = text.slice(0, range.startOffset(0));\n        const end = text.slice(range.endOffset);\n        const newInput = `${beg}**${text}**${end}`;\n        setInput(newInput);\n        range.deleteContents();\n        range.insertNode(document.createTextNode(`**${text}**`));\n        selection.removeAllRanges();\n      } else {\n        // If no selection is made\n        const cursorPos = window.anchorOffset();\n        const beg = input.slice(0, cursorPos);\n        const end = input.slice(cursorPos);\n        setIsBold(!isBold);\n        const newInput = isBold ? `${beg}**` : input;\n        setInput(newInput);\n      }\n    }\n  };\n\n  // Handles commands such as Ctrl+b and externally inputted commands\n  const handleKeyDown = e => {\n    if (e.ctrlKey && e.key === 'b') {\n      e.preventDefault();\n      console.log(\"Bold triggered\");\n      toggleBold();\n    }\n  };\n  useEffect(() => {\n    console.log(\"Noticed a keydown events\");\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [input, isBold]);\n  return null;\n};\n_s(CommandHandler, \"pOlrVFbG6kUoMD2S1nTnkvKm0AM=\");\n_c = CommandHandler;\nexport default CommandHandler;\nvar _c;\n$RefreshReg$(_c, \"CommandHandler\");","map":{"version":3,"names":["React","useEffect","useState","CommandHandler","input","setInput","editor","_s","isBold","setIsBold","checkForCommands","value","regex","match","exec","handleCommand","index","command","console","log","Math","floor","random","insert","String","replace","format","clear","before","slice","after","length","toggleBold","selection","window","getSelection","rangeCount","range","getRangeAt","text","toString","beg","startOffset","end","endOffset","newInput","deleteContents","insertNode","document","createTextNode","removeAllRanges","cursorPos","anchorOffset","handleKeyDown","e","ctrlKey","key","preventDefault","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["/home/grbaltz/LoreMasterNoteTaker/LoreMasterNoteTaker/frontend/src/handlers/CommandHandler.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst CommandHandler = ({ input, setInput, editor }) => {\n    const [isBold, setIsBold] = useState(false)\n\n    useEffect(() => {\n        const checkForCommands = (value) => {\n            const regex = /\\/(\\w+)/g;\n            let match;\n\n            while ((match = regex.exec(value)) !== null) {\n                handleCommand(match[1], match.index);\n            }\n        };\n\n        const handleCommand = (command, index) => {\n            switch (command) {\n                case \"d20\":\n                    console.log(\n                        \"Rolled a d20: \",\n                        Math.floor(Math.random() * 20) + 1\n                    );\n                    let insert = String(Math.floor(Math.random() * 20) + 1);\n                    replace(command, index, insert);\n                    break;\n                // Add more commands as needed\n                case \"bold\":\n                    console.log('triggering bold');\n                    editor.format('bold', true);\n                    clear(command, index);\n                    break;\n                default:\n                    console.log(\n                        `Command ${command} doesn't exist/isn't finished`\n                    );\n            }\n        };\n\n        checkForCommands(input);\n    }, [input, setInput]);\n\n    const clear = ( command, index ) => {\n        const before = input.slice(0, index);\n        const after = input.slice(index + command.length + 1);\n        setInput(`${before}${after}`);\n    }\n\n    const replace = ( command, index, insert ) => {\n        const before = input.slice(0, index);\n        const after = input.slice(index + command.length + 1);\n        setInput(`${before}${insert}${after}`);\n    }\n\n    // Runs through body of text and converts all instances of text in between ** ** to bold characters\n    const toggleBold = () => {\n        // get the selection window\n        const selection = window.getSelection();\n        if (selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            const text = range.toString();\n\n            if (text) {\n                const beg = text.slice(0, range.startOffset(0));\n                const end = text.slice(range.endOffset);\n                const newInput = `${beg}**${text}**${end}`;\n\n                setInput(newInput);\n                range.deleteContents();\n                range.insertNode(document.createTextNode(`**${text}**`));\n                selection.removeAllRanges();\n            } else {\n                // If no selection is made\n                const cursorPos = window.anchorOffset();\n                const beg = input.slice(0, cursorPos);\n                const end = input.slice(cursorPos);\n                setIsBold(!isBold);\n                const newInput = isBold ? `${beg}**` : input\n                setInput(newInput);\n            }\n        }\n    }\n\n    // Handles commands such as Ctrl+b and externally inputted commands\n    const handleKeyDown = (e) => {\n        if (e.ctrlKey && e.key === 'b') {\n            e.preventDefault();\n            console.log(\"Bold triggered\");\n            toggleBold();\n        }\n    }\n\n    useEffect(() => {\n        console.log(\"Noticed a keydown events\")\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        }\n    }, [input, isBold])\n\n    return null;\n};\n\nexport default CommandHandler;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}