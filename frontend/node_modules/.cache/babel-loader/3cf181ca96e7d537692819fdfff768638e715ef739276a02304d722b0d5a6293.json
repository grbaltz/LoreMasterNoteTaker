{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nconst CommandHandler = ({\n  input,\n  setInput\n}) => {\n  _s();\n  useEffect(() => {\n    const checkForCommands = value => {\n      const regex = /\\/(\\w+)/g;\n      let match;\n      while ((match = regex.exec(value)) !== null) {\n        handleCommand(match[1], match.index);\n      }\n    };\n    const handleCommand = (command, index) => {\n      let result = \"\";\n      switch (command) {\n        case \"d20\":\n          console.log(\"Rolled a d20: \", Math.floor(Math.random() * 20) + 1);\n          result = String(Math.floor(Math.random() * 20) + 1);\n          break;\n        // Add more commands as needed\n        default:\n          console.log(`Command ${command} doesn't exist/isn't finished`);\n      }\n\n      // Get text before and after the command, insert 'result' in between\n      if (result) {\n        const before = input.slice(0, index - 1);\n        const after = input.slice(index + command.length + 1);\n        setInput(`${before}${result}${after}`);\n      }\n    };\n    checkForCommands(input);\n  }, [input, setInput]);\n  return null;\n};\n_s(CommandHandler, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CommandHandler;\nexport default CommandHandler;\nvar _c;\n$RefreshReg$(_c, \"CommandHandler\");","map":{"version":3,"names":["React","useEffect","CommandHandler","input","setInput","_s","checkForCommands","value","regex","match","exec","handleCommand","index","command","result","console","log","Math","floor","random","String","before","slice","after","length","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/handlers/CommandHandler.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nconst CommandHandler = ({ input, setInput }) => {\r\n    useEffect(() => {\r\n        const checkForCommands = (value) => {\r\n            const regex = /\\/(\\w+)/g;\r\n            let match;\r\n            while ((match = regex.exec(value)) !== null) {\r\n                handleCommand(match[1], match.index);\r\n            }\r\n        };\r\n\r\n        const handleCommand = (command, index) => {\r\n            let result = \"\";\r\n            switch (command) {\r\n                case \"d20\":\r\n                    console.log(\r\n                        \"Rolled a d20: \",\r\n                        Math.floor(Math.random() * 20) + 1\r\n                    );\r\n                    result = String(Math.floor(Math.random() * 20) + 1);\r\n                    break;\r\n                // Add more commands as needed\r\n                default:\r\n                    console.log(\r\n                        `Command ${command} doesn't exist/isn't finished`\r\n                    );\r\n            }\r\n\r\n            // Get text before and after the command, insert 'result' in between\r\n            if (result) {\r\n                const before = input.slice(0, index - 1);\r\n                const after = input.slice(index + command.length + 1);\r\n                setInput(`${before}${result}${after}`);\r\n            }\r\n        };\r\n\r\n        checkForCommands(input);\r\n    }, [input, setInput]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default CommandHandler;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5CJ,SAAS,CAAC,MAAM;IACZ,MAAMK,gBAAgB,GAAIC,KAAK,IAAK;MAChC,MAAMC,KAAK,GAAG,UAAU;MACxB,IAAIC,KAAK;MACT,OAAO,CAACA,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC,MAAM,IAAI,EAAE;QACzCI,aAAa,CAACF,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAACG,KAAK,CAAC;MACxC;IACJ,CAAC;IAED,MAAMD,aAAa,GAAGA,CAACE,OAAO,EAAED,KAAK,KAAK;MACtC,IAAIE,MAAM,GAAG,EAAE;MACf,QAAQD,OAAO;QACX,KAAK,KAAK;UACNE,OAAO,CAACC,GAAG,CACP,gBAAgB,EAChBC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CACrC,CAAC;UACDL,MAAM,GAAGM,MAAM,CAACH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;UACnD;QACJ;QACA;UACIJ,OAAO,CAACC,GAAG,CACP,WAAWH,OAAO,+BACtB,CAAC;MACT;;MAEA;MACA,IAAIC,MAAM,EAAE;QACR,MAAMO,MAAM,GAAGlB,KAAK,CAACmB,KAAK,CAAC,CAAC,EAAEV,KAAK,GAAG,CAAC,CAAC;QACxC,MAAMW,KAAK,GAAGpB,KAAK,CAACmB,KAAK,CAACV,KAAK,GAAGC,OAAO,CAACW,MAAM,GAAG,CAAC,CAAC;QACrDpB,QAAQ,CAAC,GAAGiB,MAAM,GAAGP,MAAM,GAAGS,KAAK,EAAE,CAAC;MAC1C;IACJ,CAAC;IAEDjB,gBAAgB,CAACH,KAAK,CAAC;EAC3B,CAAC,EAAE,CAACA,KAAK,EAAEC,QAAQ,CAAC,CAAC;EAErB,OAAO,IAAI;AACf,CAAC;AAACC,EAAA,CAvCIH,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AAyCpB,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}