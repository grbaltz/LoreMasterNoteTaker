{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\LMNT\\\\frontend\\\\src\\\\components\\\\RenamePageButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { usePagesContext } from '../hooks/usePagesContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RenamePageButton = ({\n  page,\n  title,\n  className = '',\n  ...props\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n  const {\n    dispatch\n  } = usePagesContext();\n  const handleSubmit = async () => {\n    try {\n      console.log('attempting to rename page:', page._id);\n      const response = await fetch('/pages/' + page._id, {\n        method: 'PATCH',\n        headers: {\n          'ContentType': 'application/json'\n        },\n        body: JSON.stringify({\n          title: title\n        })\n      });\n      if (!response.ok) {\n        const errorJson = await response.json();\n        console.log('Found error in updating page:', errorJson);\n        setError(errorJson.error || 'Failed to update page');\n        return;\n      }\n      if (response.ok) {\n        setError(null);\n        console.log('Updated page');\n        dispatch({\n          type: 'UPDATE_PAGE',\n          payload: page._id\n        });\n      }\n    } catch (err) {\n      console.error('Submission failed', err);\n      setError('Something went wrong!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `rename-page-button ${className}`,\n      onClick: handleSubmit,\n      children: \"Rename Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(RenamePageButton, \"c1rJiTAj0uCYZ9YmfLz8dhMqNrM=\", false, function () {\n  return [usePagesContext];\n});\n_c = RenamePageButton;\nexport default RenamePageButton;\nvar _c;\n$RefreshReg$(_c, \"RenamePageButton\");","map":{"version":3,"names":["React","useState","usePagesContext","jsxDEV","_jsxDEV","RenamePageButton","page","title","className","props","_s","error","setError","dispatch","handleSubmit","console","log","_id","response","fetch","method","headers","body","JSON","stringify","ok","errorJson","json","type","payload","err","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/components/RenamePageButton.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { usePagesContext } from '../hooks/usePagesContext'\r\n\r\nconst RenamePageButton = ({ page, title, className = '', ...props }) => {\r\n    const [error, setError] = useState(null);\r\n    const { dispatch } = usePagesContext()\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            console.log('attempting to rename page:', page._id)\r\n            const response = await fetch('/pages/' + page._id, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'ContentType': 'application/json'\r\n                },\r\n                body: JSON.stringify({ title: title})\r\n            })\r\n\r\n            if (!response.ok) {\r\n                const errorJson = await response.json()\r\n                console.log('Found error in updating page:', errorJson)\r\n                setError(errorJson.error || 'Failed to update page')\r\n                return;\r\n            } \r\n            if (response.ok) {\r\n                setError(null)\r\n\r\n                console.log('Updated page')\r\n                dispatch({ type: 'UPDATE_PAGE', payload: page._id })\r\n            }\r\n        } catch (err) {\r\n            console.error('Submission failed', err)\r\n            setError('Something went wrong!')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className={`rename-page-button ${className}`} onClick={handleSubmit}>Rename Page</button>\r\n            {error && <div className=\"error\">{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RenamePageButton;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC,SAAS,GAAG,EAAE;EAAE,GAAGC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM;IAAEY;EAAS,CAAC,GAAGX,eAAe,CAAC,CAAC;EAEtC,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEV,IAAI,CAACW,GAAG,CAAC;MACnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,GAAGb,IAAI,CAACW,GAAG,EAAE;QAC/CG,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UACL,aAAa,EAAE;QACnB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEjB,KAAK,EAAEA;QAAK,CAAC;MACxC,CAAC,CAAC;MAEF,IAAI,CAACW,QAAQ,CAACO,EAAE,EAAE;QACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvCZ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEU,SAAS,CAAC;QACvDd,QAAQ,CAACc,SAAS,CAACf,KAAK,IAAI,uBAAuB,CAAC;QACpD;MACJ;MACA,IAAIO,QAAQ,CAACO,EAAE,EAAE;QACbb,QAAQ,CAAC,IAAI,CAAC;QAEdG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BH,QAAQ,CAAC;UAAEe,IAAI,EAAE,aAAa;UAAEC,OAAO,EAAEvB,IAAI,CAACW;QAAI,CAAC,CAAC;MACxD;IACJ,CAAC,CAAC,OAAOa,GAAG,EAAE;MACVf,OAAO,CAACJ,KAAK,CAAC,mBAAmB,EAAEmB,GAAG,CAAC;MACvClB,QAAQ,CAAC,uBAAuB,CAAC;IACrC;EACJ,CAAC;EAED,oBACIR,OAAA;IAAA2B,QAAA,gBACI3B,OAAA;MAAQI,SAAS,EAAE,sBAAsBA,SAAS,EAAG;MAACwB,OAAO,EAAElB,YAAa;MAAAiB,QAAA,EAAC;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAChGzB,KAAK,iBAAIP,OAAA;MAAKI,SAAS,EAAC,OAAO;MAAAuB,QAAA,EAAEpB;IAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEd,CAAC;AAAA1B,EAAA,CAvCKL,gBAAgB;EAAA,QAEGH,eAAe;AAAA;AAAAmC,EAAA,GAFlChC,gBAAgB;AAyCtB,eAAeA,gBAAgB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}