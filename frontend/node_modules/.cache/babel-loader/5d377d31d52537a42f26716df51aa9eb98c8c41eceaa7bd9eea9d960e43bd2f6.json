{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nconst CommandHandler = ({\n  input,\n  setInput,\n  edRef\n}) => {\n  _s();\n  const editor = edRef.current.getEditor();\n  const [isBold, setIsBold] = useState(false);\n  const checkForCommands = useCallback(value => {\n    const regex = /\\/(\\w+)/g;\n    let match;\n    while ((match = regex.exec(value)) !== null) {\n      handleCommand(match[1], match.index);\n    }\n  }, [input]);\n  const clear = useCallback((command, index) => {\n    const before = input.slice(0, index);\n    const after = input.slice(index + command.length + 1);\n    setInput(`${before}${after}`);\n  }, [input, setInput]);\n  const replace = useCallback((command, index, insert) => {\n    const before = input.slice(0, index);\n    const after = input.slice(index + command.length + 1);\n    setInput(`${before}${insert}${after}`);\n  }, [input, setInput]);\n  const handleCommand = useCallback((command, index) => {\n    switch (command) {\n      case \"d20\":\n        console.log(\"Rolled a d20: \", Math.floor(Math.random() * 20) + 1);\n        let insert = String(Math.floor(Math.random() * 20) + 1);\n        replace(command, index, insert);\n        break;\n      // Add more commands as needed\n      case \"bold\":\n        console.log('triggering bold');\n        clear(command, index);\n        editor.format('bold', true);\n        break;\n      default:\n        console.log(`Command ${command} doesn't exist/isn't finished`);\n    }\n  }, [clear, editor, replace]);\n  useEffect(() => {\n    checkForCommands(input);\n  }, [input, checkForCommands]);\n\n  // Handles commands such as Ctrl+b and externally inputted commands\n  const handleKeyDown = e => {\n    if (e.ctrlKey && e.key === 'b') {\n      e.preventDefault();\n      console.log(editor.getFormat(0));\n      editor.format('bold', true);\n    }\n  };\n  useEffect(() => {\n    console.log(\"Noticed a keydown events\");\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [input, isBold]);\n  return null;\n};\n_s(CommandHandler, \"SzPBTywwq1Jzu5Tg9BU8mybbQSM=\");\n_c = CommandHandler;\nexport default CommandHandler;\nvar _c;\n$RefreshReg$(_c, \"CommandHandler\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","CommandHandler","input","setInput","edRef","_s","editor","current","getEditor","isBold","setIsBold","checkForCommands","value","regex","match","exec","handleCommand","index","clear","command","before","slice","after","length","replace","insert","console","log","Math","floor","random","String","format","handleKeyDown","e","ctrlKey","key","preventDefault","getFormat","document","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["/home/grbaltz/LoreMasterNoteTaker/LoreMasterNoteTaker/frontend/src/handlers/CommandHandler.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\n\nconst CommandHandler = ({ input, setInput, edRef }) => {\n    const editor = edRef.current.getEditor()\n    const [isBold, setIsBold] = useState(false)\n\n    const checkForCommands = useCallback((value) => {\n        const regex = /\\/(\\w+)/g;\n        let match;\n\n        while ((match = regex.exec(value)) !== null) {\n            handleCommand(match[1], match.index);\n        }\n    }, [input]);\n\n    const clear = useCallback((command, index) => {\n        const before = input.slice(0, index);\n        const after = input.slice(index + command.length + 1);\n        setInput(`${before}${after}`);\n    }, [input, setInput])\n\n    const replace = useCallback((command, index, insert) => {\n        const before = input.slice(0, index);\n        const after = input.slice(index + command.length + 1);\n        setInput(`${before}${insert}${after}`);\n    }, [input, setInput])\n\n    const handleCommand = useCallback((command, index) => {\n        switch (command) {\n            case \"d20\":\n                console.log(\n                    \"Rolled a d20: \",\n                    Math.floor(Math.random() * 20) + 1\n                );\n                let insert = String(Math.floor(Math.random() * 20) + 1);\n                replace(command, index, insert);\n                break;\n            // Add more commands as needed\n            case \"bold\":\n                console.log('triggering bold');\n                clear(command, index);\n                editor.format('bold', true);\n                break;\n            default:\n                console.log(\n                    `Command ${command} doesn't exist/isn't finished`\n                );\n        }\n    }, [clear, editor, replace]);\n\n    useEffect(() => {\n        checkForCommands(input);\n    }, [input, checkForCommands]);\n\n    // Handles commands such as Ctrl+b and externally inputted commands\n    const handleKeyDown = (e) => {\n        if (e.ctrlKey && e.key === 'b') {\n            e.preventDefault();\n            console.log(editor.getFormat(0))\n            editor.format('bold', true)\n        }\n    }\n\n    useEffect(() => {\n        console.log(\"Noticed a keydown events\")\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        }\n    }, [input, isBold])\n\n    return null;\n};\n\nexport default CommandHandler;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}