{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\LMNT\\\\frontend\\\\src\\\\components\\\\PageContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/PageContent.css';\n\n// Components/Variables\nimport { commandsList } from './Commands';\n\n/* \r\n    Main space for where content/notes are written/stored for each page\r\n    Customizable with text editing, commands, formatting, and elements\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PageContent = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [content, setContent] = useState('');\n  const [expComm, setExpComm] = useState(false);\n  const [command, setCommand] = useState('');\n  const [ignoreKeys] = useState([\"Shift\", \"CapsLock\", \"Control\", \"Alt\"]);\n  const [input, setInput] = useState(\"\");\n\n  // Fetch content from the server on mount\n  useEffect(() => {\n    const fetchContent = async () => {\n      try {\n        const response = await fetch(`/pages/${id}`);\n        const data = await response.json();\n        if (response.ok) {\n          setContent(data.content);\n          document.getElementById('page-content').innerHTML = data.content;\n        } else {\n          console.error('Failed to fetch page content:', data);\n        }\n      } catch (err) {\n        console.error('Error:', err);\n      }\n    };\n    fetchContent();\n  }, [id]);\n\n  // Handles commands\n  /*\r\n      Commands:\r\n      - Change heading size\r\n      - Insert table\r\n      - Insert image\r\n      - Roll from loot-table\r\n      - Dice roll\r\n      TODO\r\n  */\n  const handleKeyDown = e => {\n    // If '/', trigger command menu\n    if (e.key === '/') {\n      console.log('Command expected');\n      setExpComm(true);\n      setCommand('');\n      return;\n    }\n\n    // If expecting a command (ExpComm), then save inputs until 'enter', 'tab', or submission\n    if (expComm) {\n      if (e.key === 'Enter' || e.key === 'Tab' || e.key === ' ') {\n        // TODO add submission criteria\n        // TODO Submit\n        const foundCommand = commandsList.find(cmd => cmd.name.includes(command));\n        if (foundCommand) {\n          e.preventDefault();\n\n          // Remove the command and '/' before it from the content\n          const currentContent = document.getElementById('page-content').innerHTML;\n          const commandStart = currentContent.lastIndexOf('/') + 1;\n          const newContent = currentContent.substring(0, commandStart - 1); // Remove command including the slash\n\n          // Update content of the div\n          document.getElementById('page-content').innerHTML = newContent;\n\n          // Update the content\n          updateContent(newContent);\n          foundCommand.execute();\n        }\n        console.log('Command submitted: ' + command);\n        setCommand('');\n        setExpComm(false);\n        return;\n      } else if (e.key === 'Backspace') {\n        if (command.length > 0) {\n          setCommand(command.slice(0, -1));\n        } else {\n          // Exit command sequence\n          setCommand('');\n          setExpComm(false);\n          console.log('Exited command sequence');\n        }\n      } else if (!ignoreKeys.includes(e.key)) {\n        setCommand(command + e.key);\n      }\n    }\n    if (command.length > 0) console.log(command);\n  };\n\n  // Updates content, affected by handleKeyDown\n  const handleInput = async e => {\n    const newContent = e.target.innerHTML;\n    updateContent(newContent);\n  };\n\n  // Updates the content of the page to db, useful given any input changes the content\n  // as well as submitting a command which removes text\n  const updateContent = async newContent => {\n    setContent(newContent);\n    try {\n      const response = await fetch(`/pages/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: newContent\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Failed to update content:', errorData);\n      }\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    console.log(value);\n    if (value.startsWith('/')) {\n      const command = value.substring(1);\n      handleCommand(command);\n    }\n  };\n  const handleCommand = command => {\n    switch (command) {\n      case \"bold\":\n        console.log(\"Making text bold\");\n        break;\n      default:\n        console.log(\"Command doesn't exist/isn't finished\");\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // <div\n    //     name=\"page-content\" \n    //     id=\"page-content\" \n    //     contenteditable=\"true\"\n    //     className=\"page-content-container\"\n    //     onKeyDown={handleKeyDown}\n    //     onInput={handleInput}\n    // />\n    _jsxDEV(\"input\", {\n      name: \"test-page-content\",\n      onChange: handleInputChange,\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(PageContent, \"SIzg6Kzyx+A5ezCuDvi+Jcv0Ge8=\", false, function () {\n  return [useParams];\n});\n_c = PageContent;\nexport default PageContent;\nvar _c;\n$RefreshReg$(_c, \"PageContent\");","map":{"version":3,"names":["React","useState","useEffect","useParams","commandsList","jsxDEV","_jsxDEV","PageContent","_s","id","content","setContent","expComm","setExpComm","command","setCommand","ignoreKeys","input","setInput","fetchContent","response","fetch","data","json","ok","document","getElementById","innerHTML","console","error","err","handleKeyDown","e","key","log","foundCommand","find","cmd","name","includes","preventDefault","currentContent","commandStart","lastIndexOf","newContent","substring","updateContent","execute","length","slice","handleInput","target","method","headers","body","JSON","stringify","errorData","handleInputChange","value","startsWith","handleCommand","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/components/PageContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {useParams} from 'react-router-dom'\r\nimport '../styles/PageContent.css';\r\n\r\n// Components/Variables\r\nimport { commandsList } from './Commands';\r\n\r\n/* \r\n    Main space for where content/notes are written/stored for each page\r\n    Customizable with text editing, commands, formatting, and elements\r\n*/\r\n\r\nconst PageContent = () => {\r\n    const { id } = useParams();\r\n    const [content, setContent] = useState('');\r\n    const [expComm, setExpComm] = useState(false);\r\n    const [command, setCommand] = useState('');\r\n    const [ignoreKeys] = useState([\"Shift\", \"CapsLock\", \"Control\", \"Alt\"]);\r\n    const [input, setInput] = useState(\"\");\r\n    \r\n    // Fetch content from the server on mount\r\n    useEffect(() => {\r\n        const fetchContent = async () => {\r\n        try {\r\n            const response = await fetch(`/pages/${id}`);\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n            setContent(data.content);\r\n            document.getElementById('page-content').innerHTML = data.content;\r\n            } else {\r\n            console.error('Failed to fetch page content:', data);\r\n            }\r\n        } catch (err) {\r\n            console.error('Error:', err);\r\n        }\r\n        };\r\n\r\n        fetchContent();\r\n    }, [id]);\r\n\r\n    // Handles commands\r\n    /*\r\n        Commands:\r\n        - Change heading size\r\n        - Insert table\r\n        - Insert image\r\n        - Roll from loot-table\r\n        - Dice roll\r\n        TODO\r\n    */\r\n    const handleKeyDown = (e) => {\r\n\r\n        // If '/', trigger command menu\r\n        if (e.key === '/') {\r\n            console.log('Command expected');\r\n            setExpComm(true);\r\n            setCommand('');\r\n            return;\r\n        }\r\n\r\n        // If expecting a command (ExpComm), then save inputs until 'enter', 'tab', or submission\r\n        if (expComm) {\r\n            if (e.key === 'Enter' || e.key === 'Tab' || e.key === ' ') { // TODO add submission criteria\r\n                // TODO Submit\r\n                const foundCommand = commandsList.find(cmd => cmd.name.includes(command));\r\n                if (foundCommand) {\r\n                    e.preventDefault();\r\n\r\n                    // Remove the command and '/' before it from the content\r\n                    const currentContent = document.getElementById('page-content').innerHTML;\r\n                    const commandStart = currentContent.lastIndexOf('/') + 1;\r\n                    const newContent = currentContent.substring(0, commandStart - 1); // Remove command including the slash\r\n\r\n                    // Update content of the div\r\n                    document.getElementById('page-content').innerHTML = newContent;\r\n\r\n                    // Update the content\r\n                    updateContent(newContent);\r\n                    foundCommand.execute();\r\n                }\r\n\r\n                console.log('Command submitted: ' + command);\r\n                setCommand('');\r\n                setExpComm(false);\r\n                return;\r\n            } else if (e.key === 'Backspace') {\r\n                if (command.length > 0) {\r\n                    setCommand(command.slice(0, -1));\r\n                } else {\r\n                    // Exit command sequence\r\n                    setCommand('');\r\n                    setExpComm(false);\r\n                    console.log('Exited command sequence');\r\n                }\r\n            } else if (!ignoreKeys.includes(e.key)) {\r\n                setCommand(command + e.key);\r\n            }\r\n        }\r\n\r\n        if (command.length > 0) console.log(command);\r\n    }\r\n\r\n    // Updates content, affected by handleKeyDown\r\n    const handleInput = async (e) => {\r\n        const newContent = e.target.innerHTML;\r\n        updateContent(newContent);\r\n    };\r\n    \r\n    // Updates the content of the page to db, useful given any input changes the content\r\n    // as well as submitting a command which removes text\r\n    const updateContent = async (newContent) => {\r\n        setContent(newContent);\r\n    \r\n        try {\r\n          const response = await fetch(`/pages/${id}`, {\r\n            method: 'PATCH',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ content: newContent }),\r\n          });\r\n    \r\n          if (!response.ok) {\r\n            const errorData = await response.json();\r\n            console.error('Failed to update content:', errorData);\r\n          }\r\n        } catch (err) {\r\n          console.error('Error:', err);\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        const value = e.target.value;\r\n        setInput(value);\r\n        console.log(value)\r\n\r\n        if (value.startsWith('/')) {\r\n            const command = value.substring(1);\r\n            handleCommand(command);\r\n        }\r\n    }\r\n\r\n    const handleCommand = (command) => {\r\n        switch(command) {\r\n            case \"bold\":\r\n                console.log(\"Making text bold\");\r\n                break;\r\n            default:\r\n                console.log(\"Command doesn't exist/isn't finished\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        // <div\r\n        //     name=\"page-content\" \r\n        //     id=\"page-content\" \r\n        //     contenteditable=\"true\"\r\n        //     className=\"page-content-container\"\r\n        //     onKeyDown={handleKeyDown}\r\n        //     onInput={handleInput}\r\n        // />\r\n        <input\r\n            name=\"test-page-content\"\r\n            onChange={handleInputChange}\r\n            value={input}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PageContent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}