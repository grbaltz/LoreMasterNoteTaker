{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\LMNT\\\\frontend\\\\src\\\\components\\\\PageContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/PageContent.css';\nimport CommandHandler from './CommandHandler';\nimport { PagesContext } from './PathToYourContextFile'; // Update this path to your actual context file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageContent = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    pages,\n    dispatch\n  } = useContext(PagesContext);\n  const [input, setInput] = useState('');\n\n  // Fetch content from the context on mount\n  useEffect(() => {\n    const currentPage = pages.find(page => page._id === id);\n    if (currentPage) {\n      setInput(currentPage.content || '');\n    }\n  }, [id, pages]);\n  const handleInputChange = e => {\n    const newValue = e.target.value;\n    setInput(newValue);\n\n    // Dispatch action and save to backend\n    const currentPage = pages.find(page => page._id === id);\n    if (currentPage) {\n      const updatedPage = {\n        ...currentPage,\n        content: newValue\n      };\n      dispatch({\n        type: 'UPDATE_PAGE',\n        payload: updatedPage\n      });\n      const updatePageContent = async () => {\n        try {\n          await fetch(`/pages/${id}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              content: newValue\n            })\n          });\n        } catch (err) {\n          console.error('Failed to update page content:', err);\n        }\n      };\n      updatePageContent();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"page-content\",\n      className: \"page-content-container\",\n      onChange: handleInputChange,\n      value: input,\n      placeholder: \"Type a message or command\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommandHandler, {\n      input: input,\n      setInput: setInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(PageContent, \"fkhkaDH65E4V8MSOfehcUoAHFHI=\", false, function () {\n  return [useParams];\n});\n_c = PageContent;\nexport default PageContent;\nvar _c;\n$RefreshReg$(_c, \"PageContent\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useParams","CommandHandler","PagesContext","jsxDEV","_jsxDEV","Fragment","_Fragment","PageContent","_s","id","pages","dispatch","input","setInput","currentPage","find","page","_id","content","handleInputChange","e","newValue","target","value","updatedPage","type","payload","updatePageContent","fetch","method","headers","body","JSON","stringify","err","console","error","children","name","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/components/PageContent.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/PageContent.css';\r\nimport CommandHandler from './CommandHandler';\r\nimport { PagesContext } from './PathToYourContextFile'; // Update this path to your actual context file\r\n\r\nconst PageContent = () => {\r\n  const { id } = useParams();\r\n  const { pages, dispatch } = useContext(PagesContext);\r\n  const [input, setInput] = useState('');\r\n\r\n  // Fetch content from the context on mount\r\n  useEffect(() => {\r\n    const currentPage = pages.find(page => page._id === id);\r\n    if (currentPage) {\r\n      setInput(currentPage.content || '');\r\n    }\r\n  }, [id, pages]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const newValue = e.target.value;\r\n    setInput(newValue);\r\n\r\n    // Dispatch action and save to backend\r\n    const currentPage = pages.find(page => page._id === id);\r\n    if (currentPage) {\r\n      const updatedPage = { ...currentPage, content: newValue };\r\n      dispatch({ type: 'UPDATE_PAGE', payload: updatedPage });\r\n\r\n      const updatePageContent = async () => {\r\n        try {\r\n          await fetch(`/pages/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ content: newValue })\r\n          });\r\n        } catch (err) {\r\n          console.error('Failed to update page content:', err);\r\n        }\r\n      };\r\n\r\n      updatePageContent();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        name=\"page-content\"\r\n        className=\"page-content-container\"\r\n        onChange={handleInputChange}\r\n        value={input}\r\n        placeholder=\"Type a message or command\"\r\n      />\r\n      <CommandHandler input={input} setInput={setInput} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageContent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,2BAA2B;AAClC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,YAAY,QAAQ,yBAAyB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC1B,MAAM;IAAEU,KAAK;IAAEC;EAAS,CAAC,GAAGZ,UAAU,CAACG,YAAY,CAAC;EACpD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMgB,WAAW,GAAGJ,KAAK,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKR,EAAE,CAAC;IACvD,IAAIK,WAAW,EAAE;MACfD,QAAQ,CAACC,WAAW,CAACI,OAAO,IAAI,EAAE,CAAC;IACrC;EACF,CAAC,EAAE,CAACT,EAAE,EAAEC,KAAK,CAAC,CAAC;EAEf,MAAMS,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC/BV,QAAQ,CAACQ,QAAQ,CAAC;;IAElB;IACA,MAAMP,WAAW,GAAGJ,KAAK,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKR,EAAE,CAAC;IACvD,IAAIK,WAAW,EAAE;MACf,MAAMU,WAAW,GAAG;QAAE,GAAGV,WAAW;QAAEI,OAAO,EAAEG;MAAS,CAAC;MACzDV,QAAQ,CAAC;QAAEc,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEF;MAAY,CAAC,CAAC;MAEvD,MAAMG,iBAAiB,GAAG,MAAAA,CAAA,KAAY;QACpC,IAAI;UACF,MAAMC,KAAK,CAAC,UAAUnB,EAAE,EAAE,EAAE;YAC1BoB,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAEf,OAAO,EAAEG;YAAS,CAAC;UAC5C,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOa,GAAG,EAAE;UACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;QACtD;MACF,CAAC;MAEDP,iBAAiB,CAAC,CAAC;IACrB;EACF,CAAC;EAED,oBACEvB,OAAA,CAAAE,SAAA;IAAA+B,QAAA,gBACEjC,OAAA;MACEkC,IAAI,EAAC,cAAc;MACnBC,SAAS,EAAC,wBAAwB;MAClCC,QAAQ,EAAErB,iBAAkB;MAC5BI,KAAK,EAAEX,KAAM;MACb6B,WAAW,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFzC,OAAA,CAACH,cAAc;MAACW,KAAK,EAAEA,KAAM;MAACC,QAAQ,EAAEA;IAAS;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACpD,CAAC;AAEP,CAAC;AAACrC,EAAA,CArDID,WAAW;EAAA,QACAP,SAAS;AAAA;AAAA8C,EAAA,GADpBvC,WAAW;AAuDjB,eAAeA,WAAW;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}