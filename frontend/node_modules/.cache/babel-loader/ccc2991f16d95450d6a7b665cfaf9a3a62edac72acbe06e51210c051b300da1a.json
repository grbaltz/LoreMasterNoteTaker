{"ast":null,"code":"var _jsxFileName = \"/home/grbaltz/LoreMasterNoteTaker/LoreMasterNoteTaker/frontend/src/contexts/PagesContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useEffect } from \"react\";\nimport axios from 'axios';\n\n// Create the PagesContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PagesContext = /*#__PURE__*/createContext();\nconst structurePages = pages => {\n  const pageMap = new Map();\n\n  // Create a mpa of page ids to objects\n  pages.forEach(page => pageMap.set(page._id, {\n    ...page,\n    children: []\n  }));\n  const structuredPages = [];\n  pageMap.forEach((page, id) => {\n    if (page.parent) {\n      if (pageMap.has(page.parent)) {\n        pageMap.get(page.parent).children.push(page); // adds the current page to the list of children for the parent page\n      }\n    } else {\n      structuredPages.push(page); // top level page, hence saved in top level list\n    }\n  });\n  return structuredPages;\n};\n\n// Define the reducer to handle different actions\nexport const pagesReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_PAGES':\n      return {\n        ...state,\n        // pages: action.payload\n        pages: structurePages(action.payload)\n      };\n    case 'CREATE_PAGE':\n      // Add the new page to the state\n      const newPage = action.payload;\n      const addChild = (pages, newPage) => {\n        return pages.map(page => {\n          if (page._id === newPage.parent) {\n            // Add the new page to its parent's children array\n            return {\n              ...page,\n              children: [...(page.children || []), newPage]\n            };\n          }\n          if (page.children && page.children.length > 0) {\n            return {\n              ...page,\n              children: addChild(page.children, newPage)\n            };\n          }\n          return page;\n        });\n      };\n      let updatedPages = addChild(state.pages, newPage);\n\n      // If newPage has no parent, it's a top-level page\n      if (!newPage.parent) {\n        updatedPages = [...state.pages, newPage];\n      }\n      return {\n        ...state,\n        pages: updatedPages\n      };\n    case 'DELETE_PAGE':\n      return {\n        ...state,\n        pages: state.pages.filter(page => page._id !== action.payload)\n      };\n    case 'UPDATE_PAGE':\n      return {\n        ...state,\n        pages: state.pages.map(page => page._id === action.payload._id ? action.payload : page)\n      };\n    default:\n      console.warn(`Unhandled action type: ${action.type}`);\n      return state;\n  }\n};\n\n// PagesContextProvider component to provide context to its children\nexport const PagesContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(pagesReducer, {\n    pages: []\n  });\n  useEffect(() => {\n    // Fetch all pages from the server when the provider mounts\n    const fetchPages = async () => {\n      try {\n        const response = await axios.get('/pages/');\n        dispatch({\n          type: 'SET_PAGES',\n          payload: response.data\n        });\n      } catch (error) {\n        console.error('Failed to fetch pages', error);\n      }\n    };\n    fetchPages();\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(PagesContext.Provider, {\n    value: {\n      ...state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(PagesContextProvider, \"4YyqsEPpCLjRoub0Gdqq1UkfeXY=\");\n_c = PagesContextProvider;\nvar _c;\n$RefreshReg$(_c, \"PagesContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","axios","jsxDEV","_jsxDEV","PagesContext","structurePages","pages","pageMap","Map","forEach","page","set","_id","children","structuredPages","id","parent","has","get","push","pagesReducer","state","action","type","payload","newPage","addChild","map","length","updatedPages","filter","console","warn","PagesContextProvider","_s","dispatch","fetchPages","response","data","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/grbaltz/LoreMasterNoteTaker/LoreMasterNoteTaker/frontend/src/contexts/PagesContext.js"],"sourcesContent":["import React, { createContext, useReducer, useEffect } from \"react\";\nimport axios from 'axios';\n\n// Create the PagesContext\nexport const PagesContext = createContext();\n\nconst structurePages = (pages) => {\n    const pageMap = new Map();\n\n    // Create a mpa of page ids to objects\n    pages.forEach(page => pageMap.set(page._id, { ...page, children: [] }));\n\n    const structuredPages = [];\n\n    pageMap.forEach((page, id) => {\n        if (page.parent) {\n            if (pageMap.has(page.parent)) {\n                pageMap.get(page.parent).children.push(page); // adds the current page to the list of children for the parent page\n            }\n        } else {\n            structuredPages.push(page); // top level page, hence saved in top level list\n        }\n    });\n\n    return structuredPages;\n}\n\n// Define the reducer to handle different actions\nexport const pagesReducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_PAGES':\n            return {\n                ...state,\n                // pages: action.payload\n                pages: structurePages(action.payload)\n            };\n            case 'CREATE_PAGE':\n                // Add the new page to the state\n                const newPage = action.payload;\n\n                const addChild = (pages, newPage) => {\n                    return pages.map(page => {\n                    if (page._id === newPage.parent) {\n                        // Add the new page to its parent's children array\n                        return {\n                        ...page,\n                        children: [...(page.children || []), newPage],\n                        };\n                    }\n                    if (page.children && page.children.length > 0) {\n                        return {\n                        ...page,\n                        children: addChild(page.children, newPage),\n                        };\n                    }\n                    return page;\n                    });\n                };\n\n                let updatedPages = addChild(state.pages, newPage);\n\n                // If newPage has no parent, it's a top-level page\n                if (!newPage.parent) {\n                    updatedPages = [...state.pages, newPage];\n                }\n\n                return {\n                    ...state,\n                    pages: updatedPages,\n                };\n        case 'DELETE_PAGE':\n            return {\n                ...state,\n                pages: state.pages.filter(page => page._id !== action.payload)\n            };\n        case 'UPDATE_PAGE':\n            return {\n                ...state,\n                pages: state.pages.map(page =>\n                    page._id === action.payload._id ? action.payload : page\n                )\n            };\n        default:\n            console.warn(`Unhandled action type: ${action.type}`);\n            return state;\n    }\n};\n\n// PagesContextProvider component to provide context to its children\nexport const PagesContextProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(pagesReducer, {\n        pages: []\n    });\n\n    useEffect(() => {\n        // Fetch all pages from the server when the provider mounts\n        const fetchPages = async () => {\n            try {\n                const response = await axios.get('/pages/');\n                dispatch({ type: 'SET_PAGES', payload: response.data });\n            } catch (error) {\n                console.error('Failed to fetch pages', error);\n            }\n        };\n\n        fetchPages();\n    }, []); // Empty dependency array ensures this runs once on mount\n\n    return (\n        <PagesContext.Provider value={{ ...state, dispatch }}>\n            {children}\n        </PagesContext.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}