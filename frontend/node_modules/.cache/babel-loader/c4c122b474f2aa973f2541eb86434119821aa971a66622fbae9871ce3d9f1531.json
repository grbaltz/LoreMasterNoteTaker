{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nconst CommandHandler = ({\n  input,\n  setInput\n}) => {\n  _s();\n  useEffect(() => {\n    const checkForCommands = value => {\n      const regex = /\\/(\\w+)/g;\n      let match;\n      while ((match = regex.exec(value)) !== null) {\n        handleCommand(match[1], match.index);\n      }\n    };\n    const handleCommand = (command, index) => {\n      switch (command) {\n        case \"bold\":\n          const before = input.slice(0, index);\n          const after = input.slice(index + command.length + 1); // +1 for the \"/\"\n          setInput(`${before}<b>${after}</b>`);\n          break;\n        // Add more commands as needed\n        default:\n          console.log(`Command ${command} doesn't exist/isn't finished`);\n      }\n    };\n    checkForCommands(input);\n  }, [input, setInput]);\n  return null;\n};\n_s(CommandHandler, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CommandHandler;\nexport default CommandHandler;\nvar _c;\n$RefreshReg$(_c, \"CommandHandler\");","map":{"version":3,"names":["React","useEffect","CommandHandler","input","setInput","_s","checkForCommands","value","regex","match","exec","handleCommand","index","command","before","slice","after","length","console","log","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/handlers/CommandHandler.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst CommandHandler = ({ input, setInput }) => {\r\n  useEffect(() => {\r\n    const checkForCommands = (value) => {\r\n      const regex = /\\/(\\w+)/g;\r\n      let match;\r\n      while ((match = regex.exec(value)) !== null) {\r\n        handleCommand(match[1], match.index);\r\n      }\r\n    };\r\n\r\n    const handleCommand = (command, index) => {\r\n      switch (command) {\r\n        case \"bold\":\r\n          const before = input.slice(0, index);\r\n          const after = input.slice(index + command.length + 1); // +1 for the \"/\"\r\n          setInput(`${before}<b>${after}</b>`);\r\n          break;\r\n        // Add more commands as needed\r\n        default:\r\n          console.log(`Command ${command} doesn't exist/isn't finished`);\r\n      }\r\n    };\r\n\r\n    checkForCommands(input);\r\n  }, [input, setInput]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default CommandHandler;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9CJ,SAAS,CAAC,MAAM;IACd,MAAMK,gBAAgB,GAAIC,KAAK,IAAK;MAClC,MAAMC,KAAK,GAAG,UAAU;MACxB,IAAIC,KAAK;MACT,OAAO,CAACA,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC,MAAM,IAAI,EAAE;QAC3CI,aAAa,CAACF,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAACG,KAAK,CAAC;MACtC;IACF,CAAC;IAED,MAAMD,aAAa,GAAGA,CAACE,OAAO,EAAED,KAAK,KAAK;MACxC,QAAQC,OAAO;QACb,KAAK,MAAM;UACT,MAAMC,MAAM,GAAGX,KAAK,CAACY,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC;UACpC,MAAMI,KAAK,GAAGb,KAAK,CAACY,KAAK,CAACH,KAAK,GAAGC,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;UACvDb,QAAQ,CAAC,GAAGU,MAAM,MAAME,KAAK,MAAM,CAAC;UACpC;QACF;QACA;UACEE,OAAO,CAACC,GAAG,CAAC,WAAWN,OAAO,+BAA+B,CAAC;MAClE;IACF,CAAC;IAEDP,gBAAgB,CAACH,KAAK,CAAC;EACzB,CAAC,EAAE,CAACA,KAAK,EAAEC,QAAQ,CAAC,CAAC;EAErB,OAAO,IAAI;AACb,CAAC;AAACC,EAAA,CA3BIH,cAAc;AAAAkB,EAAA,GAAdlB,cAAc;AA6BpB,eAAeA,cAAc;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}