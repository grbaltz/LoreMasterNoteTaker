{"ast":null,"code":"// api.js (create this file if it doesn't exist)\nimport { useContext } from 'react';\nimport { PagesContext } from './contexts/PagesContext'; // Update this path to your actual context file\n\nexport const updatePageContent = async (id, newContent, dispatch) => {\n  try {\n    const response = await fetch('/pages/' + id, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        content: newContent\n      })\n    });\n    if (response.ok) {\n      console.log(\"Updated content\");\n      const updatedPage = await response.json();\n      dispatch({\n        type: 'UPDATE_PAGE',\n        payload: updatedPage\n      });\n    } else {\n      const json = await response.json();\n      console.log('Found error in updating page content');\n      throw new Error(json.error);\n    }\n  } catch (err) {\n    console.error(\"Couldn't save, got this error:\\n\", err);\n    throw err;\n  }\n};\nexport const fetchPageContent = async (id, dispatch) => {\n  try {\n    const response = await fetch('/pages/' + id);\n    const data = await response.json();\n    return data.content;\n  } catch (err) {\n    console.error(\"Couldn't fetch, got this error:\\n\", err);\n    throw err;\n  }\n};","map":{"version":3,"names":["useContext","PagesContext","updatePageContent","id","newContent","dispatch","response","fetch","method","headers","body","JSON","stringify","content","ok","console","log","updatedPage","json","type","payload","Error","error","err","fetchPageContent","data"],"sources":["D:/Personal Projects/LMNT/frontend/src/api.js"],"sourcesContent":["// api.js (create this file if it doesn't exist)\r\nimport { useContext } from 'react';\r\nimport { PagesContext } from './contexts/PagesContext'; // Update this path to your actual context file\r\n\r\nexport const updatePageContent = async (id, newContent, dispatch) => {\r\n  try {\r\n    const response = await fetch('/pages/' + id, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ content: newContent })\r\n    });\r\n\r\n    if (response.ok) {\r\n      console.log(\"Updated content\");\r\n      const updatedPage = await response.json();\r\n      dispatch({ type: 'UPDATE_PAGE', payload: updatedPage });\r\n    } else {\r\n      const json = await response.json();\r\n      console.log('Found error in updating page content');\r\n      throw new Error(json.error);\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Couldn't save, got this error:\\n\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const fetchPageContent = async (id, dispatch) => {\r\n    try {\r\n        const response = await fetch('/pages/' + id);\r\n        const data = await response.json();\r\n        return data.content;\r\n    } catch (err) {\r\n        console.error(\"Couldn't fetch, got this error:\\n\", err);\r\n        throw err;\r\n    }\r\n}"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,YAAY,QAAQ,yBAAyB,CAAC,CAAC;;AAExD,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,EAAE,EAAEC,UAAU,EAAEC,QAAQ,KAAK;EACnE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,GAAGJ,EAAE,EAAE;MAC3CK,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,OAAO,EAAET;MAAW,CAAC;IAC9C,CAAC,CAAC;IAEF,IAAIE,QAAQ,CAACQ,EAAE,EAAE;MACfC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B,MAAMC,WAAW,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MACzCb,QAAQ,CAAC;QAAEc,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEH;MAAY,CAAC,CAAC;IACzD,CAAC,MAAM;MACL,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCH,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD,MAAM,IAAIK,KAAK,CAACH,IAAI,CAACI,KAAK,CAAC;IAC7B;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZR,OAAO,CAACO,KAAK,CAAC,kCAAkC,EAAEC,GAAG,CAAC;IACtD,MAAMA,GAAG;EACX;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOrB,EAAE,EAAEE,QAAQ,KAAK;EACpD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,GAAGJ,EAAE,CAAC;IAC5C,MAAMsB,IAAI,GAAG,MAAMnB,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClC,OAAOO,IAAI,CAACZ,OAAO;EACvB,CAAC,CAAC,OAAOU,GAAG,EAAE;IACVR,OAAO,CAACO,KAAK,CAAC,mCAAmC,EAAEC,GAAG,CAAC;IACvD,MAAMA,GAAG;EACb;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}