{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\LMNT\\\\frontend\\\\src\\\\contexts\\\\PagesContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useEffect } from \"react\";\nimport axios from 'axios';\n\n// Create the PagesContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PagesContext = /*#__PURE__*/createContext();\n\n// Define the reducer to handle different actions\nexport const pagesReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_PAGES':\n      return {\n        ...state,\n        pages: action.payload\n      };\n    case 'CREATE_PAGE':\n      return {\n        ...state,\n        pages: [action.payload, ...state.pages]\n      };\n    case 'DELETE_PAGE':\n      return {\n        ...state,\n        pages: state.pages.filter(page => page._id !== action.payload)\n      };\n    case 'UPDATE_PAGE':\n      return {\n        ...state,\n        pages: state.pages.map(page => page._id === action.payload._id ? action.payload : page)\n      };\n    default:\n      console.warn(`Unhandled action type: ${action.type}`);\n      return state;\n  }\n};\n\n// PagesContextProvider component to provide context to its children\nexport const PagesContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(pagesReducer, {\n    pages: []\n  });\n  useEffect(() => {\n    // Fetch all pages from the server when the provider mounts\n    const fetchPages = async () => {\n      try {\n        const response = await axios.get('/pages/api');\n        dispatch({\n          type: 'SET_PAGES',\n          payload: response.data\n        });\n      } catch (error) {\n        console.error('Failed to fetch pages', error);\n      }\n    };\n    fetchPages();\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(PagesContext.Provider, {\n    value: {\n      ...state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(PagesContextProvider, \"iIwwLJe9D+Q+V0B/74YmoF/swtE=\");\n_c = PagesContextProvider;\nvar _c;\n$RefreshReg$(_c, \"PagesContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","axios","jsxDEV","_jsxDEV","PagesContext","pagesReducer","state","action","type","pages","payload","filter","page","_id","map","console","warn","PagesContextProvider","children","_s","dispatch","fetchPages","response","get","data","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/contexts/PagesContext.js"],"sourcesContent":["import React, { createContext, useReducer, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\n// Create the PagesContext\r\nexport const PagesContext = createContext();\r\n\r\n// Define the reducer to handle different actions\r\nexport const pagesReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_PAGES':\r\n            return {\r\n                ...state,\r\n                pages: action.payload\r\n            };\r\n        case 'CREATE_PAGE':\r\n            return {\r\n                ...state,\r\n                pages: [action.payload, ...state.pages]\r\n            };\r\n        case 'DELETE_PAGE':\r\n            return {\r\n                ...state,\r\n                pages: state.pages.filter(page => page._id !== action.payload)\r\n            };\r\n        case 'UPDATE_PAGE':\r\n            return {\r\n                ...state,\r\n                pages: state.pages.map(page =>\r\n                    page._id === action.payload._id ? action.payload : page\r\n                )\r\n            };\r\n        default:\r\n            console.warn(`Unhandled action type: ${action.type}`);\r\n            return state;\r\n    }\r\n};\r\n\r\n// PagesContextProvider component to provide context to its children\r\nexport const PagesContextProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(pagesReducer, {\r\n        pages: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        // Fetch all pages from the server when the provider mounts\r\n        const fetchPages = async () => {\r\n            try {\r\n                const response = await axios.get('/pages/api');\r\n                dispatch({ type: 'SET_PAGES', payload: response.data });\r\n            } catch (error) {\r\n                console.error('Failed to fetch pages', error);\r\n            }\r\n        };\r\n\r\n        fetchPages();\r\n    }, []); // Empty dependency array ensures this runs once on mount\r\n\r\n    return (\r\n        <PagesContext.Provider value={{ ...state, dispatch }}>\r\n            {children}\r\n        </PagesContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACnE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAE3C;AACA,OAAO,MAAMO,YAAY,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,WAAW;MACZ,OAAO;QACH,GAAGF,KAAK;QACRG,KAAK,EAAEF,MAAM,CAACG;MAClB,CAAC;IACL,KAAK,aAAa;MACd,OAAO;QACH,GAAGJ,KAAK;QACRG,KAAK,EAAE,CAACF,MAAM,CAACG,OAAO,EAAE,GAAGJ,KAAK,CAACG,KAAK;MAC1C,CAAC;IACL,KAAK,aAAa;MACd,OAAO;QACH,GAAGH,KAAK;QACRG,KAAK,EAAEH,KAAK,CAACG,KAAK,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKN,MAAM,CAACG,OAAO;MACjE,CAAC;IACL,KAAK,aAAa;MACd,OAAO;QACH,GAAGJ,KAAK;QACRG,KAAK,EAAEH,KAAK,CAACG,KAAK,CAACK,GAAG,CAACF,IAAI,IACvBA,IAAI,CAACC,GAAG,KAAKN,MAAM,CAACG,OAAO,CAACG,GAAG,GAAGN,MAAM,CAACG,OAAO,GAAGE,IACvD;MACJ,CAAC;IACL;MACIG,OAAO,CAACC,IAAI,CAAC,0BAA0BT,MAAM,CAACC,IAAI,EAAE,CAAC;MACrD,OAAOF,KAAK;EACpB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMW,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACb,KAAK,EAAEc,QAAQ,CAAC,GAAGrB,UAAU,CAACM,YAAY,EAAE;IAC/CI,KAAK,EAAE;EACX,CAAC,CAAC;EAEFT,SAAS,CAAC,MAAM;IACZ;IACA,MAAMqB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,YAAY,CAAC;QAC9CH,QAAQ,CAAC;UAAEZ,IAAI,EAAE,WAAW;UAAEE,OAAO,EAAEY,QAAQ,CAACE;QAAK,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZV,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ,CAAC;IAEDJ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIlB,OAAA,CAACC,YAAY,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAE,GAAGrB,KAAK;MAAEc;IAAS,CAAE;IAAAF,QAAA,EAChDA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC,CAAC;AAACZ,EAAA,CAxBWF,oBAAoB;AAAAe,EAAA,GAApBf,oBAAoB;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}