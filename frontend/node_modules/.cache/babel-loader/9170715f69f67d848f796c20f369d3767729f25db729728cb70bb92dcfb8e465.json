{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\LMNT\\\\frontend\\\\src\\\\components\\\\PageContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/PageContent.css';\nimport CommandHandler from '../handlers/CommandHandler';\n\n// Main space for where content/notes are written/stored for each page\n// Customizable with text editing, commands, formatting, and elements\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageContent = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    pages,\n    dispatch\n  } = useContext(PagesContext);\n  const [input, setInput] = useState('');\n\n  // Fetch content from the server on mount\n  useEffect(() => {\n    const fetchContent = async () => {\n      try {\n        const response = await fetch(`/pages/${id}`);\n        const data = await response.json();\n        if (response.ok) {\n          setInput(data.content);\n          document.getElementById('page-content').innerHTML = data.content;\n        } else {\n          console.error('Failed to fetch page content:', data);\n        }\n      } catch (err) {\n        console.error('Error:', err);\n      }\n    };\n    fetchContent();\n  }, [id]);\n\n  // Save content to the server when it changes\n  // Save content to the context and backend when it changes\n  useEffect(() => {\n    if (input) {\n      dispatch({\n        type: 'UPDATE_PAGE',\n        payload: {\n          _id: id,\n          content: input\n        }\n      });\n      const updatePageContent = async () => {\n        try {\n          await fetch(`/pages/${id}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              content: input\n            })\n          });\n        } catch (err) {\n          console.error('Failed to update page content:', err);\n        }\n      };\n      updatePageContent();\n    }\n  }, [input, id, dispatch]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"page-content\",\n      className: \"page-content-container\",\n      onChange: handleInputChange,\n      value: input,\n      placeholder: \"Type a message or command\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommandHandler, {\n      input: input,\n      setInput: setInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(PageContent, \"fzRlVMJaoYIGUveLkPiWOZ22Qpw=\", false, function () {\n  return [useParams];\n});\n_c = PageContent;\nexport default PageContent;\nvar _c;\n$RefreshReg$(_c, \"PageContent\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useParams","CommandHandler","jsxDEV","_jsxDEV","Fragment","_Fragment","PageContent","_s","id","pages","dispatch","PagesContext","input","setInput","fetchContent","response","fetch","data","json","ok","content","document","getElementById","innerHTML","console","error","err","type","payload","_id","updatePageContent","method","headers","body","JSON","stringify","handleInputChange","e","target","value","children","name","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Personal Projects/LMNT/frontend/src/components/PageContent.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/PageContent.css';\r\nimport CommandHandler from '../handlers/CommandHandler';\r\n\r\n// Main space for where content/notes are written/stored for each page\r\n// Customizable with text editing, commands, formatting, and elements\r\n\r\nconst PageContent = () => {\r\n  const { id } = useParams();\r\n  const { pages, dispatch } = useContext(PagesContext);\r\n  const [input, setInput] = useState('');\r\n\r\n  // Fetch content from the server on mount\r\n  useEffect(() => {\r\n    const fetchContent = async () => {\r\n      try {\r\n        const response = await fetch(`/pages/${id}`);\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          setInput(data.content);\r\n          document.getElementById('page-content').innerHTML = data.content;\r\n        } else {\r\n          console.error('Failed to fetch page content:', data);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error:', err);\r\n      }\r\n    };\r\n\r\n    fetchContent();\r\n  }, [id]);\r\n\r\n  // Save content to the server when it changes\r\n  // Save content to the context and backend when it changes\r\n  useEffect(() => {\r\n    if (input) {\r\n      dispatch({ type: 'UPDATE_PAGE', payload: { _id: id, content: input } });\r\n\r\n      const updatePageContent = async () => {\r\n        try {\r\n          await fetch(`/pages/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ content: input })\r\n          });\r\n        } catch (err) {\r\n          console.error('Failed to update page content:', err);\r\n        }\r\n      };\r\n\r\n      updatePageContent();\r\n    }\r\n  }, [input, id, dispatch]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        name=\"page-content\"\r\n        className=\"page-content-container\"\r\n        onChange={handleInputChange}\r\n        value={input}\r\n        placeholder=\"Type a message or command\"\r\n      />\r\n      <CommandHandler input={input} setInput={setInput} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}